// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	GallowRequest
	GallowReply
	Gallow
	GuessRequest
	GuessReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GallowRequest struct {
	Id         int32 `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	RetryLimit int32 `protobuf:"varint,2,opt,name=RetryLimit" json:"RetryLimit,omitempty"`
}

func (m *GallowRequest) Reset()                    { *m = GallowRequest{} }
func (m *GallowRequest) String() string            { return proto.CompactTextString(m) }
func (*GallowRequest) ProtoMessage()               {}
func (*GallowRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GallowRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GallowRequest) GetRetryLimit() int32 {
	if m != nil {
		return m.RetryLimit
	}
	return 0
}

type GallowReply struct {
	Gallow []*Gallow `protobuf:"bytes,1,rep,name=Gallow" json:"Gallow,omitempty"`
}

func (m *GallowReply) Reset()                    { *m = GallowReply{} }
func (m *GallowReply) String() string            { return proto.CompactTextString(m) }
func (*GallowReply) ProtoMessage()               {}
func (*GallowReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GallowReply) GetGallow() []*Gallow {
	if m != nil {
		return m.Gallow
	}
	return nil
}

type Gallow struct {
	Id               int32           `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	RetryLimit       int32           `protobuf:"varint,2,opt,name=RetryLimit" json:"RetryLimit,omitempty"`
	RetryLeft        int32           `protobuf:"varint,3,opt,name=RetryLeft" json:"RetryLeft,omitempty"`
	Word             string          `protobuf:"bytes,4,opt,name=Word" json:"Word,omitempty"`
	WordMasked       string          `protobuf:"bytes,5,opt,name=WordMasked" json:"WordMasked,omitempty"`
	IncorrectGuesses []*GuessRequest `protobuf:"bytes,6,rep,name=IncorrectGuesses" json:"IncorrectGuesses,omitempty"`
	Status           bool            `protobuf:"varint,7,opt,name=Status" json:"Status,omitempty"`
}

func (m *Gallow) Reset()                    { *m = Gallow{} }
func (m *Gallow) String() string            { return proto.CompactTextString(m) }
func (*Gallow) ProtoMessage()               {}
func (*Gallow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Gallow) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Gallow) GetRetryLimit() int32 {
	if m != nil {
		return m.RetryLimit
	}
	return 0
}

func (m *Gallow) GetRetryLeft() int32 {
	if m != nil {
		return m.RetryLeft
	}
	return 0
}

func (m *Gallow) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *Gallow) GetWordMasked() string {
	if m != nil {
		return m.WordMasked
	}
	return ""
}

func (m *Gallow) GetIncorrectGuesses() []*GuessRequest {
	if m != nil {
		return m.IncorrectGuesses
	}
	return nil
}

func (m *Gallow) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GuessRequest struct {
	GallowID int32  `protobuf:"varint,1,opt,name=GallowID" json:"GallowID,omitempty"`
	Letter   string `protobuf:"bytes,2,opt,name=Letter" json:"Letter,omitempty"`
}

func (m *GuessRequest) Reset()                    { *m = GuessRequest{} }
func (m *GuessRequest) String() string            { return proto.CompactTextString(m) }
func (*GuessRequest) ProtoMessage()               {}
func (*GuessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GuessRequest) GetGallowID() int32 {
	if m != nil {
		return m.GallowID
	}
	return 0
}

func (m *GuessRequest) GetLetter() string {
	if m != nil {
		return m.Letter
	}
	return ""
}

type GuessReply struct {
	Gallow *Gallow `protobuf:"bytes,1,opt,name=Gallow" json:"Gallow,omitempty"`
}

func (m *GuessReply) Reset()                    { *m = GuessReply{} }
func (m *GuessReply) String() string            { return proto.CompactTextString(m) }
func (*GuessReply) ProtoMessage()               {}
func (*GuessReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GuessReply) GetGallow() *Gallow {
	if m != nil {
		return m.Gallow
	}
	return nil
}

func init() {
	proto.RegisterType((*GallowRequest)(nil), "GallowRequest")
	proto.RegisterType((*GallowReply)(nil), "GallowReply")
	proto.RegisterType((*Gallow)(nil), "Gallow")
	proto.RegisterType((*GuessRequest)(nil), "GuessRequest")
	proto.RegisterType((*GuessReply)(nil), "GuessReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hangman service

type HangmanClient interface {
	NewGallow(ctx context.Context, in *GallowRequest, opts ...grpc.CallOption) (*GallowReply, error)
	ListGallows(ctx context.Context, in *GallowRequest, opts ...grpc.CallOption) (*GallowReply, error)
	ResumeGallow(ctx context.Context, in *GallowRequest, opts ...grpc.CallOption) (*GallowReply, error)
	GuessLetter(ctx context.Context, in *GuessRequest, opts ...grpc.CallOption) (*GuessReply, error)
}

type hangmanClient struct {
	cc *grpc.ClientConn
}

func NewHangmanClient(cc *grpc.ClientConn) HangmanClient {
	return &hangmanClient{cc}
}

func (c *hangmanClient) NewGallow(ctx context.Context, in *GallowRequest, opts ...grpc.CallOption) (*GallowReply, error) {
	out := new(GallowReply)
	err := grpc.Invoke(ctx, "/Hangman/NewGallow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) ListGallows(ctx context.Context, in *GallowRequest, opts ...grpc.CallOption) (*GallowReply, error) {
	out := new(GallowReply)
	err := grpc.Invoke(ctx, "/Hangman/ListGallows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) ResumeGallow(ctx context.Context, in *GallowRequest, opts ...grpc.CallOption) (*GallowReply, error) {
	out := new(GallowReply)
	err := grpc.Invoke(ctx, "/Hangman/ResumeGallow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hangmanClient) GuessLetter(ctx context.Context, in *GuessRequest, opts ...grpc.CallOption) (*GuessReply, error) {
	out := new(GuessReply)
	err := grpc.Invoke(ctx, "/Hangman/GuessLetter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hangman service

type HangmanServer interface {
	NewGallow(context.Context, *GallowRequest) (*GallowReply, error)
	ListGallows(context.Context, *GallowRequest) (*GallowReply, error)
	ResumeGallow(context.Context, *GallowRequest) (*GallowReply, error)
	GuessLetter(context.Context, *GuessRequest) (*GuessReply, error)
}

func RegisterHangmanServer(s *grpc.Server, srv HangmanServer) {
	s.RegisterService(&_Hangman_serviceDesc, srv)
}

func _Hangman_NewGallow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GallowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).NewGallow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hangman/NewGallow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).NewGallow(ctx, req.(*GallowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_ListGallows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GallowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).ListGallows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hangman/ListGallows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).ListGallows(ctx, req.(*GallowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_ResumeGallow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GallowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).ResumeGallow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hangman/ResumeGallow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).ResumeGallow(ctx, req.(*GallowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hangman_GuessLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HangmanServer).GuessLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Hangman/GuessLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HangmanServer).GuessLetter(ctx, req.(*GuessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hangman_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Hangman",
	HandlerType: (*HangmanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGallow",
			Handler:    _Hangman_NewGallow_Handler,
		},
		{
			MethodName: "ListGallows",
			Handler:    _Hangman_ListGallows_Handler,
		},
		{
			MethodName: "ResumeGallow",
			Handler:    _Hangman_ResumeGallow_Handler,
		},
		{
			MethodName: "GuessLetter",
			Handler:    _Hangman_GuessLetter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0x6d, 0xfa, 0x33, 0xed, 0xdc, 0x69, 0x3f, 0x3e, 0xb2, 0x90, 0x50, 0x44, 0x87, 0xac, 0x06,
	0x4a, 0xb3, 0xa8, 0x2b, 0x57, 0x82, 0x08, 0x75, 0xa0, 0xba, 0x88, 0x0b, 0xd7, 0x63, 0xe7, 0x2a,
	0x83, 0x6d, 0xa7, 0x26, 0x19, 0x4a, 0x5f, 0xcf, 0xf7, 0xf0, 0x5d, 0xa4, 0x99, 0x8c, 0x9d, 0xaa,
	0xa0, 0xae, 0x92, 0x73, 0xee, 0xcd, 0x49, 0xce, 0xb9, 0x01, 0x3f, 0x59, 0x67, 0x62, 0xad, 0x72,
	0x93, 0xf3, 0x0b, 0x18, 0x4c, 0x93, 0xc5, 0x22, 0xdf, 0x48, 0x7c, 0x29, 0x50, 0x1b, 0xfa, 0x0f,
	0x9a, 0x71, 0xca, 0x48, 0x48, 0xa2, 0x8e, 0x6c, 0xc6, 0x29, 0x3d, 0x01, 0x90, 0x68, 0xd4, 0x76,
	0x96, 0x2d, 0x33, 0xc3, 0x9a, 0x96, 0xaf, 0x31, 0x5c, 0x40, 0x50, 0x09, 0xac, 0x17, 0x5b, 0x7a,
	0x0a, 0x5e, 0x09, 0x19, 0x09, 0x5b, 0x51, 0x30, 0xe9, 0x0a, 0x57, 0x75, 0x34, 0x7f, 0x23, 0x55,
	0xc7, 0x5f, 0xaf, 0xa2, 0xc7, 0xe0, 0x97, 0x08, 0x1f, 0x0d, 0x6b, 0xd9, 0xf2, 0x9e, 0xa0, 0x14,
	0xda, 0xf7, 0xb9, 0x4a, 0x59, 0x3b, 0x24, 0x91, 0x2f, 0xed, 0x7e, 0xa7, 0xb8, 0x5b, 0x6f, 0x12,
	0xfd, 0x8c, 0x29, 0xeb, 0xd8, 0x4a, 0x8d, 0xa1, 0xe7, 0xf0, 0x3f, 0x5e, 0xcd, 0x73, 0xa5, 0x70,
	0x6e, 0xa6, 0x05, 0x6a, 0x8d, 0x9a, 0x79, 0xf6, 0xdd, 0x03, 0x61, 0xb1, 0x4b, 0x45, 0x7e, 0x69,
	0xa3, 0x47, 0xe0, 0xdd, 0x99, 0xc4, 0x14, 0x9a, 0x75, 0x43, 0x12, 0xf5, 0xa4, 0x43, 0xfc, 0x12,
	0xfa, 0xf5, 0x93, 0x74, 0x08, 0xbd, 0xd2, 0x6e, 0x7c, 0xe5, 0xac, 0x7e, 0xe0, 0x9d, 0xc6, 0x0c,
	0x8d, 0x41, 0x65, 0xcd, 0xfa, 0xd2, 0x21, 0x3e, 0x06, 0x70, 0x1a, 0x9f, 0x23, 0x25, 0xdf, 0x44,
	0x3a, 0x79, 0x25, 0xd0, 0xbd, 0x4e, 0x56, 0x4f, 0xcb, 0x64, 0x45, 0x47, 0xe0, 0xdf, 0xe2, 0xa6,
	0x0a, 0x58, 0x1c, 0xcc, 0x76, 0xd8, 0x17, 0xb5, 0x51, 0xf1, 0x06, 0x1d, 0x43, 0x30, 0xcb, 0xb4,
	0x29, 0x49, 0xfd, 0x63, 0xbb, 0x80, 0xbe, 0x44, 0x5d, 0x2c, 0xf1, 0x97, 0xf2, 0x23, 0x08, 0xac,
	0x8d, 0xd2, 0x15, 0x3d, 0x8c, 0x74, 0x18, 0x88, 0xbd, 0x47, 0xde, 0x78, 0xf0, 0xec, 0x7f, 0x3c,
	0x7b, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xc4, 0x34, 0x47, 0x9c, 0x02, 0x00, 0x00,
}
